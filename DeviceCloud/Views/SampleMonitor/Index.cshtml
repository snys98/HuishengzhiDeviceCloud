@using System.Configuration
@using DeviceCloud.Models
@using DeviceLibrary
@using Newtonsoft.Json


<div class="am-g am-g-fixed tranmonitor-g-fixed" style="height: 100%;">
    <div class="am-u-md-4" style="height: 100%;">
        <div class="am-panel-group" style="height: 90%;">
            @*<section class="am-panel am-panel-primary">
				<div class="am-panel-hd">样本转运监控</div>
				<div class="am-panel-bd">

				</div>
			</section>*@
            <section class="am-panel am-panel-primary">
                <div class="am-panel-hd">详情</div>
                <div style="overflow: scroll; overflow-x: hidden; height: 90%;max-height:80vh">
                    <div class="am-panel-bd am-g">
                        <div class="am-u-sm-8 am-u-end">
                            <span class="am-icon-user">  承运人:</span>
                            <span id="tb-courierName" class="am-fr"></span>
                        </div>
                        @*<div class="am-u-sm-11 am-u-end" style="overflow: scroll; overflow-x: hidden; height: 60vh;">*@

                        @*</div>*@
                    </div>
                    <table class="am-table am-table-bordered am-table-striped am-table-hover">
                        <thead>
                        <tr>
                            <th>温度</th>
                            <th>湿度</th>
                            <th>上传时间</th>
                        </tr>
                        </thead>
                        <tbody id="tb-body">
                        @*<tr>
								<td>RX7989</td>
								<td>T型病毒样本</td>
								<td>2015-10-11</td>
							</tr>*@
                        </tbody>
                    </table>
                </div>
            </section>
            @*<section class="am-panel am-panel-primary">
				<div class="am-panel-hd">选项</div>
				<div class="am-panel-bd">
					<div class="am-form-inline">
						<fieldset class="am-g">
							<label for="select-device">选择设备: </label>
							<select id="select-device" data-am-selected>
								<option value="051201001">设备1</option>
								<option value="0">设备2</option>
							</select>
							<button onclick="reloadDatas(document.getElementById('select-device').value)" class="am-btn am-btn-success">确定</button>
						</fieldset>
					</div>
				</div>
			</section>*@
        </div>
    </div>
    <div class="am-u-md-8" style="height: 100%;">
        <div class="am-panel-group" style="height: 90%;">
            <section class="am-panel am-panel-primary" style="height: 50%;">
                <div class="am-panel-hd">地图视图</div>
                <div class="am-panel-bd" style="height: 100%; padding: 0 0 39.375px 0">
                    <div id="Bmap" style="height: 100%;"></div>
                </div>

            </section>
            <section class="am-panel am-panel-primary" style="height: 50%;">
                <div class="am-panel-hd">数据视图</div>
                <div class="am-panel-bd" style="height: 100%">
                    <div id="chart" class="am-u-sm-8"></div>
                    <div id="curInfo" class="am-u-sm-4"></div>
                </div>
            </section>
        </div>
    </div>
</div>
@section CustomScripts
{
    @*引入百度地图*@
    <script type="text/javascript" src="http://api.map.baidu.com/api?v=2.0&ak=@ConfigurationManager.AppSettings.Get("BaiduApiKey")"></script>
    <script type="text/javascript" src="http://api.map.baidu.com/library/EventWrapper/1.2/src/EventWrapper.min.js"></script>
    <script type="text/javascript" src="~/Content/js/map/map-api.js"></script>
    @*引入echart*@
    <script src="http://echarts.baidu.com/build/dist/echarts.js"></script>
    <script type="text/javascript">
        // 百度地图API功能
        var map; // 创建Map实例
        var chart; // 图表实例
        var chartOption; //图表相关选项
        var sampleMonitorData; //样本监控类数据
        var refreshInterval = 30000; // 数据刷新间隔
        /*
        // -------全局通用
        REFRESH: 'refresh',
        RESTORE: 'restore',
        RESIZE: 'resize',
        CLICK: 'click',
        DBLCLICK: 'dblclick',
        HOVER: 'hover',
        MOUSEOUT: 'mouseout',
        // -------业务交互逻辑
        DATA_CHANGED: 'dataChanged',
        DATA_ZOOM: 'dataZoom',
        DATA_RANGE: 'dataRange',
        DATA_RANGE_HOVERLINK: 'dataRangeHoverLink',
        LEGEND_SELECTED: 'legendSelected',
        LEGEND_HOVERLINK: 'legendHoverLink',
        MAP_SELECTED: 'mapSelected',
        PIE_SELECTED: 'pieSelected',
        MAGIC_TYPE_CHANGED: 'magicTypeChanged',
        DATA_VIEW_CHANGED: 'dataViewChanged',
        TIMELINE_CHANGED: 'timelineChanged',
        MAP_ROAM: 'mapRoam',
        */
        // 使用
        //初始化echart
        require.config({
            paths: {
                echarts: 'http://echarts.baidu.com/build/dist'
            }
        });
        require(
            [
                'echarts',
                'echarts/chart/line' // 使用柱状图就加载bar模块，按需加载
            ],
            function(ec) {
                // 基于准备好的dom，初始化echarts图表
                chart = ec.init(document.getElementById('chart'), 'macarons');
                chartOption = {
                    tooltip: {
                        trigger: 'axis',
                        show: true
                    },
                    legend: {
                        data: ['温度(℃)', '湿度(%)'],
                        selectedMode: 'single',
                        selected: {
                            '湿度(%)': false
                        },
                    },
                    xAxis: [
                        {
                            type: 'category',
                            //这里赋值X坐标轴上的值,应该赋值时间
                            //data: ["2015-12-1", "2015-12-2", "2015-12-3", "2015-12-4", "2015-12-5", "2015-12-6"],
                            //markLine: {
                            //    data: [
                            //        { type: 'average', name: '平均值' }
                            //    ]
                            //}
                        }
                    ],
                    yAxis: [
                        {
                            type: 'value',
                        }
                    ],
                    series: [
                        {
                            name: "温度(℃)",
                            type: "line",
                            //这里赋值Y坐标轴上的值,应该赋值对应时间的值
                            data: [],
                            markLine: {
                                data: [
                                    { type: 'average', name: '平均值' },
                                    [
                                        {
                                            name: '温度上限',
                                            value: 8,
                                            xAxis: -1,
                                            yAxis: 8,
                                            itemStyle: {
                                                normal: {
                                                    color: '#CC66CC'
                                                },
                                                emphasis: {
                                                    color: '#CC99CC'
                                                }
                                            }
                                        }, // 当xAxis为类目轴时，数值1会被理解为类目轴的index，通过xAxis:-1|MAXNUMBER可以让线到达grid边缘
                                        { xAxis: 100, yAxis: 8 } // 当xAxis为类目轴时，字符串'周三'会被理解为与类目轴的文本进行匹配
                                    ],
                                    [
                                        {
                                            name: '温度下限',
                                            value: 2,
                                            xAxis: -1,
                                            yAxis: 2,
                                            itemStyle: {
                                                normal: {
                                                    color: '#99CCFF'
                                                },
                                                emphasis: {
                                                    color: '#9999FF'
                                                }
                                            }
                                        }, // 当xAxis或yAxis为数值轴时，不管传入是什么，都被理解为数值后做空间位置换算
                                        { xAxis: 100, yAxis: 2 }
                                    ]
                                ],
                                clickable: false,
                            },
                            markPoint: {
                                data: [
                                    {
                                        type: 'max',
                                        name: '最大值',
                                        itemStyle: {
                                            normal: {
                                                color: '#CC66CC'
                                            },
                                            emphasis: {
                                                color: '#CC99CC'
                                            }
                                        }
                                    },
                                    {
                                        type: 'min',
                                        name: '最小值',
                                        itemStyle: {
                                            normal: {
                                                color: '#99CCFF'
                                            },
                                            emphasis: {
                                                color: '#9999FF'
                                            }
                                        }
                                    }
                                ],
                                clickable: false,
                            },
                            showAllSymbol: true,
                            legendHoverLink: false
                        },
                        {
                            name: "湿度(%)",
                            type: "line",
                            //这里赋值Y坐标轴上的值,应该赋值对应时间的值
                            data: [],
                            markLine: {
                                data: [
                                    { type: 'average', name: '平均值' },
                                    [
                                        {
                                            name: '湿度上限',
                                            value: 90,
                                            xAxis: -1,
                                            yAxis: 90,
                                            itemStyle: {
                                                normal: {
                                                    color: '#CC66CC'
                                                },
                                                emphasis: {
                                                    color: '#CC99CC'
                                                }
                                            }
                                        }, // 当xAxis为类目轴时，数值1会被理解为类目轴的index，通过xAxis:-1|MAXNUMBER可以让线到达grid边缘
                                        { xAxis: 100, yAxis: 90 } // 当xAxis为类目轴时，字符串'周三'会被理解为与类目轴的文本进行匹配
                                    ],
                                    [
                                        {
                                            name: '湿度下限',
                                            value: 5,
                                            xAxis: -1,
                                            yAxis: 5,
                                            itemStyle: {
                                                normal: {
                                                    color: '#99CCFF'
                                                },
                                                emphasis: {
                                                    color: '#9999FF'
                                                }
                                            }
                                        }, // 当xAxis或yAxis为数值轴时，不管传入是什么，都被理解为数值后做空间位置换算
                                        { xAxis: 100, yAxis: 5 }
                                    ]
                                ],
                                clickable: false,
                            },
                            markPoint: {
                                data: [
                                    {
                                        type: 'max',
                                        name: '最大值',
                                        itemStyle: {
                                            normal: {
                                                color: '#CC66CC'
                                            },
                                            emphasis: {
                                                color: '#CC99CC'
                                            }
                                        }
                                    },
                                    {
                                        type: 'min',
                                        name: '最小值',
                                        itemStyle: {
                                            normal: {
                                                color: '#99CCFF'
                                            },
                                            emphasis: {
                                                color: '#9999FF'
                                            }
                                        }
                                    }
                                ],
                                clickable: false,
                            },
                            showAllSymbol: true,
                            legendHoverLink: false
                        }
                    ]
                }
            }
        );
        var ecConfig = require('echarts/config');

        function locateMarker(param) {
            //var mes = '【' + param.type + '】';
            //if (typeof param.seriesIndex != 'undefined') {
            //	mes += '  seriesIndex : ' + param.seriesIndex;
            //	mes += '  dataIndex : ' + param.dataIndex;
            //}
            //else {
            //	document.getElementById('console').innerHTML = mes;
            //}
            console.log(param);
            if (param.type == "click" && typeof param.seriesIndex != 'undefined') {
                map_api_PanTo(sampleMonitorData.TranLogs[param.dataIndex].Longitude, sampleMonitorData.TranLogs[param.dataIndex].Latitude);
                BMapLib.EventWrapper.trigger(Markers[param.dataIndex], 'click', { 'type': 'onclick', target: Markers[param.dataIndex] });
            }
        }

        //建立marker内容
        function buildMarkerContent(tranLog) {
            var html = "<div>";
            html += "<p>温度: " + tranLog.Temperature + " ℃<p>";
            html += "<p>湿度: " + tranLog.Humidity + " %<p>";
            html += "</div>";
            return html;
        }

        //初始化所有点位置,时间格式:yyyyMMddHHmmss
        function loadMarkers(tranLogs) {
            //每次reload都需要清除地图里面的数据,但是百度地图基本无法进行该操作,所以直接重新载入
            map_api_Clear();
            for (var i = 0; i < tranLogs.length; i++) {
                map_api_AddWindowMarker(tranLogs[i].Longitude, tranLogs[i].Latitude, buildMarkerContent(tranLogs[i]), i, tranLogs.length);
            }
            map_api_BuildLine();
            @*var content;
            @foreach (TranLog data in ViewBag.Monitor.Datas)
                {
                <text>
            content = "@Html.Raw(data.ToMarkerInfo())"
            AddWindowMarker(@data.Longitude, @data.Latitude, content);
            </text>
                }*@
        };

        function loadChart(tranLogs) {
            var tempratureDatas = [];
            var humidityDatas = [];
            var xAxisLables = [];
            for (var i = 0; i < tranLogs.length; i++) {
                tempratureDatas.push(tranLogs[i].Temperature);
                humidityDatas.push(tranLogs[i].Humidity);
                //replace只是为了美化时间显示
                xAxisLables.push(tranLogs[i].UploadTime.substring(5).replace("T", " "));
            }
            //温度
            chartOption.series[0].data = tempratureDatas;
            //湿度
            chartOption.series[1].data = humidityDatas;
            //X轴时间
            chartOption.xAxis[0].data = xAxisLables;
            chart.on(ecConfig.EVENT.CLICK, locateMarker);
            chart.setOption(chartOption);
        };

        function buildNewRow(tranLog) {
            $('#tb-body').append("<tr><td>" + tranLog.Temperature + "</td>" +
                    "<td>" + tranLog.Humidity + "</td>" +
                    "<td>" + tranLog.UploadTime.substring(5).replace("T", " ") + "</td></tr>");
        }

        function loadTable(sampleMonitorData) {
            var tranLogs = sampleMonitorData.TranLogs;
            $('#tb-body').html("");
            for (var i = 0; i < tranLogs.length; i++) {
                buildNewRow(tranLogs[i]);
            }
            $('#tb-courierName').html(sampleMonitorData.Courier.Name);
        }

        function resizeChart() {
            chart.resize();
        }

        //reloadDatas("cb45e2aa-c58e-40de-9152-63ff2d055038")
        function reloadDatas(tranId) {
            $.post("@Url.Action("GetSampleMonitorByTranId", "SampleMonitor")",
                {
                    tranId: tranId,
                },
                function(data, status) {
                    if (status == "success") {
                        sampleMonitorData = data;
                        loadMarkers(sampleMonitorData.TranLogs);
                        loadChart(sampleMonitorData.TranLogs);
                        loadTable(sampleMonitorData);
                        map_api_PanTo(sampleMonitorData.TranLogs[sampleMonitorData.TranLogs.length - 1].Longitude, sampleMonitorData.TranLogs[sampleMonitorData.TranLogs.length - 1].Latitude);
                    }
                }, "json");
        }

        function init() {
            siteRoot = "@Url.Content("~")";
            markerStyleOption = { icon: new BMap.Icon(siteRoot + "Content/images/map/marker.png", new BMap.Size(20, 20)) };
            map = new BMap.Map("Bmap");
            map.centerAndZoom(new BMap.Point(104.072168, 30.557979), 17); // 初始化地图,设置中心点坐标和地图级别
            map.enableScrollWheelZoom(true); //开启鼠标滚轮缩放
            document.body.onresize = resizeChart;
            reloadDatas('@ViewBag.TranId');
            self.setInterval("reloadDatas('@ViewBag.TranId')", refreshInterval);
        }

        function DisableA() {

            for (var i = 0; i < document.getElementsByTagName("a").length; i++) {

                document.getElementsByTagName("a")[i].onclick = function() { return false }
            }
        }

        $(document).ready(init());
    </script>
}

@section CustomStyle
{
    <style type="text/css">
        @@media only screen and (min-width: 1200px) {
            .tranmonitor-g-fixed { max-width: 1200px; }
        }

        @@media only screen and (min-width: 641px) {
            .tranmonitor-sidebar {
                font-size: 1.4rem;
                padding-top: 20px;
            }
        }

        #Bmap {
            width: 100%;
            height: 89.9%;
        }

        #chart {
            width: 100%;
            height: 100%;
        }

        .tranmonitor-g-fixed { padding-top: 10px; }

        body { height: 100vh }

        footer {
            bottom: 0;
            position: fixed;
            width: 100vw;
        }
    </style>
}